require('dotenv').config();
const { Bot, Keyboard } = require("grammy");
const { quizBtn } = require("./data/variables");
const { createAdaptiveKeyboard } = require("./utils/keyboardUtils");
const { startQuiz, handleQuizAnswer, endQuiz, getUserResults, downloadResultsCSV } = require("./bot/quiz");
const { loadConfig} = require("./config/loadConfig");


const bot = new Bot(process.env.BOT_API_KEY);


bot.command('download', async (ctx) => {
  await downloadResultsCSV(ctx);
});

bot.command("start", async (ctx) => {
  const config = await loadConfig();
  
  if (config.length === 0) {
    return ctx.reply("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.");
  }

  const firstLevelItems = config.map(item => Object.keys(item)[0]);
  const keyboard = createAdaptiveKeyboard(firstLevelItems);
  const userName = ctx.from.first_name || ctx.from.username || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`, {
    reply_markup: keyboard,
  });
});


bot.on("message:text", async (ctx) => {
  const config = await loadConfig();
  const messageText = ctx.message.text;

  if (config.length === 0) {
    return ctx.reply("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.");
  }

  if (messageText === "üé≤ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üé≤" && quizBtn) {
    const result = await startQuiz(ctx);
    if (!result.success) {
      const firstLevelItems = config.map(item => Object.keys(item)[0]);
      const keyboard = createAdaptiveKeyboard(firstLevelItems);
      return ctx.reply(result.message, {
        reply_markup: keyboard,
      });
    }
    return;
  }
  
  if (messageText === "üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã") {
    const results = await getUserResults(ctx.from.id);
    const firstLevelItems = config.map(item => Object.keys(item)[0]);
    const keyboard = createAdaptiveKeyboard(firstLevelItems);
    
    if (results.length === 0) {
      return ctx.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!", {
        reply_markup: keyboard,
      });
    }

    let resultMessage = "–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n";
    results.forEach((result, index) => {
      resultMessage += `–ü–æ–ø—ã—Ç–∫–∞ ${index + 1} (${result.date}):\n`;
      resultMessage += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.username}\n`;
      resultMessage += `–°—á—ë—Ç: ${result.score} –∏–∑ ${result.totalQuestions}\n\n`;
    });

    return ctx.reply(resultMessage, {
      reply_markup: keyboard,
    });
  }


if (messageText === "–í—ã–π—Ç–∏ –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã") {
  await endQuiz(ctx, false, true); 
  return; 
}

  const quizHandled = await handleQuizAnswer(ctx, messageText);
  if (quizHandled) {
    return;
  }


  const firstLevelIndex = config.findIndex(item => Object.keys(item)[0] === messageText);
  
  if (firstLevelIndex !== -1) {
    const subItems = Object.keys(config[firstLevelIndex][messageText]);
    const keyboard = createAdaptiveKeyboard(subItems, true);

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–æ–ø—Ü–∏—é:", {
      reply_markup: keyboard,
    });
  } else if (messageText === "–ù–∞–∑–∞–¥") {
    const firstLevelItems = config.map(item => Object.keys(item)[0]);
    const keyboard = createAdaptiveKeyboard(firstLevelItems);

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", {
      reply_markup: keyboard,
    });
  } else {

    for (const item of config) {
      const mainKey = Object.keys(item)[0];
      const subItems = item[mainKey];
      
      if (subItems[messageText]) {
        return ctx.reply(subItems[messageText], {
          reply_markup: new Keyboard()
            .text("–ù–∞–∑–∞–¥").row()
            .resized()
            .oneTime(false)
        });
      }
    }
    await ctx.reply("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start");
  }
});


bot.on("callback_query:data", async (ctx) => {
  const userId = ctx.from.id;
  const data = ctx.callbackQuery.data;


  try {
    const quizHandled = await handleQuizAnswer(ctx, data);
    if (quizHandled) {
      await ctx.answerCallbackQuery();
    } else {
      if (!quizStates.has(userId)) {
        await ctx.answerCallbackQuery();
      } else {
        await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." });
      }
    }
  } catch (error) {
    console.error(`Error handling callback for user ${userId}: ${error.message}`);
    await ctx.answerCallbackQuery({ text:  "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." });
  }
});

bot.start().catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err));



module.exports = { createAdaptiveKeyboard };